warning: in the working copy of 'src/app/components/lines/lines.component.ts', LF will be replaced by CRLF the next time Git touches it
diff --git a/src/app/components/lines/lines.component.ts b/src/app/components/lines/lines.component.ts
index 359f04c..7bdaf3c 100644
--- a/src/app/components/lines/lines.component.ts
+++ b/src/app/components/lines/lines.component.ts
@@ -70,7 +70,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
   bulkClearingColumns = signal<boolean>(false);
   selectedTableId = signal<number | null>(null);
   categoryBulkCommandsVisible = signal<boolean>(false);
-
+
   // Main category table suggestion getters (initialized in constructor)
   loadingSuggestedTables!: Signal<boolean>;
   suggestedTables!: Signal<TableMatch[]>;
@@ -108,22 +108,22 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
   displayedColumns: string[] = ['id', 'name', 'field_name', 'table_name', 'column_name', 'default', 'reason'];

   // Computed properties for bulk update functionality
-  linesWithoutTable = computed(() =>
+  linesWithoutTable = computed(() =>
     this.lines().filter(line => !line.table_id && !line.table_name)
   );

-  linesWithoutColumn = computed(() =>
-    this.lines().filter(line =>
+  linesWithoutColumn = computed(() =>
+    this.lines().filter(line =>
       line.table_id && !line.column_id && line.field_name
     )
   );

   // Computed properties for cleaning operations
-  linesWithTable = computed(() =>
+  linesWithTable = computed(() =>
     this.lines().filter(line => line.table_id || line.table_name)
   );

-  linesWithColumn = computed(() =>
+  linesWithColumn = computed(() =>
     this.lines().filter(line => line.column_id || line.column_name)
   );

@@ -135,7 +135,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {

   getSubCategoryLinesWithoutColumn = (groupName: string): Line[] => {
     const groupLines = this.groupedLines()[groupName] || [];
-    return groupLines.filter(line =>
+    return groupLines.filter(line =>
       line.table_id && !line.column_id && line.field_name
     );
   };
@@ -161,12 +161,12 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
     console.log('Available sub-categories:', this.subCategories());

     const grouped = new Map<string, { lines: Line[], subCategoryId: number | null }>();
-
+
     this.lines().forEach(line => {
       const subCategoryId = line.sub_category_id;
       let groupKey = 'Uncategorized';
       let actualSubCategoryId: number | null = null;
-
+
       if (subCategoryId) {
         const subCategory = this.subCategories().find(sc => sc.id === subCategoryId);
         groupKey = subCategory ? subCategory.name : `Sub-category ${subCategoryId}`;
@@ -175,7 +175,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
       } else {
         console.log(`Line ${line.id} (${line.name}) -> No sub_category_id -> Group: ${groupKey}`);
       }
-
+
       if (!grouped.has(groupKey)) {
         grouped.set(groupKey, { lines: [], subCategoryId: actualSubCategoryId });
       }
@@ -197,7 +197,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
         return a.subCategoryId - b.subCategoryId;
       })
       .map(([key]) => key);
-
+
     console.log('Final grouped result:', groups);
     console.log('Group order by ID:', groupOrder);
     return { groups, groupOrder };
@@ -230,10 +230,10 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
   ngOnInit(): void {
     // Setup typeahead functionality
     this.setupFilteredObservables();
-
+
     // Load tables for bulk update functionality
     this.loadTables();
-
+
     // If categoryId is provided as input, load lines immediately
     if (this.categoryId) {
       this.loadLines(this.categoryId);
@@ -285,9 +285,9 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
       )
     }).subscribe({
       next: (data) => {
-        console.log('Received lines data:', data.lines);
-        console.log('Received sub-categories data:', data.subCategories);
-        console.log('First line sample:', data.lines[0]);
+        // console.log('Received lines data:', data.lines);
+        // console.log('Received sub-categories data:', data.subCategories);
+        // console.log('First line sample:', data.lines[0]);
         this.lines.set(data.lines);
         this.subCategories.set(data.subCategories);
         this.loading.set(false);
@@ -472,9 +472,9 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
   }

   hasSubCategoryBulkCommands(groupName: string): boolean {
-    return this.getSubCategoryLinesWithoutTable(groupName).length > 0 ||
-           this.getSubCategoryLinesWithoutColumn(groupName).length > 0 ||
-           this.getSubCategoryLinesWithTable(groupName).length > 0 ||
+    return this.getSubCategoryLinesWithoutTable(groupName).length > 0 ||
+           this.getSubCategoryLinesWithoutColumn(groupName).length > 0 ||
+           this.getSubCategoryLinesWithTable(groupName).length > 0 ||
            this.getSubCategoryLinesWithColumn(groupName).length > 0;
   }

@@ -484,9 +484,9 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
   }

   hasCategoryBulkCommands(): boolean {
-    return this.linesWithoutTable().length > 0 ||
-           this.linesWithoutColumn().length > 0 ||
-           this.linesWithTable().length > 0 ||
+    return this.linesWithoutTable().length > 0 ||
+           this.linesWithoutColumn().length > 0 ||
+           this.linesWithTable().length > 0 ||
            this.linesWithColumn().length > 0;
   }

@@ -494,9 +494,9 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
   allLinesHaveCompleteMappings = computed(() => {
     const lines = this.lines();
     if (lines.length === 0) return true;
-
-    return lines.every(line =>
-      (line.table_id || line.table_name) &&
+
+    return lines.every(line =>
+      (line.table_id || line.table_name) &&
       (line.column_id || line.column_name)
     );
   });
@@ -505,9 +505,9 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
   getSubCategoryAllLinesHaveCompleteMappings = (groupName: string): boolean => {
     const groupLines = this.groupedLines()[groupName] || [];
     if (groupLines.length === 0) return true;
-
-    return groupLines.every(line =>
-      (line.table_id || line.table_name) &&
+
+    return groupLines.every(line =>
+      (line.table_id || line.table_name) &&
       (line.column_id || line.column_name)
     );
   };
@@ -536,10 +536,10 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
   getRowClasses(line: Line): string {
     const baseClasses = 'clickable-row';
     if (this.needsHighlighting(line)) {
-      console.log(`Line ${line.id} needs table highlighting:`, line);
+      // console.log(`Line ${line.id} needs table highlighting:`, line);
       return `${baseClasses} highlight-missing-table test-highlight`;
     } else if (this.needsColumnHighlighting(line)) {
-      console.log(`Line ${line.id} needs column highlighting:`, line);
+      // console.log(`Line ${line.id} needs column highlighting:`, line);
       return `${baseClasses} highlight-missing-column test-highlight`;
     }
     return baseClasses;
@@ -560,7 +560,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
           currentLines[index] = { ...currentLines[index], ...result };
           this.lines.set([...currentLines]);
         }
-
+
         // Note: Success message is now handled in the dialog component
         // No need to show another success message here
       }
@@ -631,12 +631,12 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
   bulkUpdateTableForLines(): void {
     const categoryId = this.categoryId;
     const formValue = this.bulkUpdateForm.value;
-
+
     // Get table_id from the selected object
-    const tableId = typeof formValue.table_name === 'object'
-      ? formValue.table_name?.id
+    const tableId = typeof formValue.table_name === 'object'
+      ? formValue.table_name?.id
       : this.tables().find(t => t.name === formValue.table_name)?.id;
-
+
     if (!categoryId || !tableId) {
       this.snackBar.open('Please select a table first', 'Close', {
         duration: 3000,
@@ -665,7 +665,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {

   private updateLinesIndividually(linesToUpdate: Line[], tableId: number): void {
     // Create an array of update requests - only update table_id
-    const updateRequests = linesToUpdate.map(line =>
+    const updateRequests = linesToUpdate.map(line =>
       this.apiService.updateLineTable(line.id, tableId).pipe(
         catchError(error => {
           console.error(`Error updating line ${line.id}:`, error);
@@ -678,21 +678,21 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
     forkJoin(updateRequests).subscribe({
       next: (results) => {
         this.bulkUpdating.set(false);
-
+
         const successful = results.filter(result => !result.error);
         const failed = results.filter(result => result.error);
-
-        this.bulkUpdateProgress.set({
-          completed: successful.length,
-          total: linesToUpdate.length,
-          failed: failed.length
+
+        this.bulkUpdateProgress.set({
+          completed: successful.length,
+          total: linesToUpdate.length,
+          failed: failed.length
         });

         // Show success message
         if (successful.length > 0) {
           this.snackBar.open(
-            `Successfully updated ${successful.length} line(s)${failed.length > 0 ? `, ${failed.length} failed` : ''}`,
-            'Close',
+            `Successfully updated ${successful.length} line(s)${failed.length > 0 ? `, ${failed.length} failed` : ''}`,
+            'Close',
             {
               duration: 5000,
               horizontalPosition: 'right',
@@ -706,7 +706,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
             verticalPosition: 'top'
           });
         }
-
+
         // Clear the form and update the lines data
         this.bulkUpdateForm.patchValue({ table_name: '' });
         this.selectedTableId.set(null);
@@ -726,7 +726,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {

   bulkUpdateColumnsForLines(): void {
     const linesToUpdate = this.linesWithoutColumn();
-
+
     if (linesToUpdate.length === 0) {
       this.snackBar.open('No lines found that need column updates', 'Close', {
         duration: 3000,
@@ -759,7 +759,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {

   private updateColumnsForTables(linesByTable: Map<number, Line[]>): void {
     const tableIds = Array.from(linesByTable.keys());
-    const columnRequests = tableIds.map(tableId =>
+    const columnRequests = tableIds.map(tableId =>
       this.apiService.getColumnsByTable(tableId).pipe(
         map(columns => ({ tableId, columns, error: false })),
         catchError(error => {
@@ -787,15 +787,15 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
             const totalFailed = updateResults.reduce((sum, result) => sum + result.failed, 0);

             this.bulkUpdatingColumns.set(false);
-            this.columnBulkUpdateProgress.set({
-              completed: totalUpdated,
-              total: linesByTable.size > 0 ? Array.from(linesByTable.values()).flat().length : 0,
-              failed: totalFailed
+            this.columnBulkUpdateProgress.set({
+              completed: totalUpdated,
+              total: linesByTable.size > 0 ? Array.from(linesByTable.values()).flat().length : 0,
+              failed: totalFailed
             });

             this.snackBar.open(
-              `Successfully updated ${totalUpdated} column(s)${totalFailed > 0 ? `, ${totalFailed} failed` : ''}`,
-              'Close',
+              `Successfully updated ${totalUpdated} column(s)${totalFailed > 0 ? `, ${totalFailed} failed` : ''}`,
+              'Close',
               {
                 duration: 5000,
                 horizontalPosition: 'right',
@@ -839,7 +839,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
       }

       // Find matching column by name (case-insensitive)
-      const matchingColumn = columns.find(column =>
+      const matchingColumn = columns.find(column =>
         column.name.toLowerCase() === line.field_name!.toLowerCase()
       );

@@ -872,7 +872,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
   // Bulk clear table names for all lines
   bulkClearTableNames(): void {
     const linesToClear = this.linesWithTable();
-
+
     if (linesToClear.length === 0) {
       this.snackBar.open('No lines with table assignments found to clear', 'Close', {
         duration: 3000,
@@ -890,7 +890,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
   }

   private clearTableNamesIndividually(linesToClear: Line[]): void {
-    const clearRequests = linesToClear.map(line =>
+    const clearRequests = linesToClear.map(line =>
       this.apiService.clearLineTable(line.id).pipe(
         catchError(error => {
           console.error(`Error clearing table for line ${line.id}:`, error);
@@ -902,20 +902,20 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
     forkJoin(clearRequests).subscribe({
       next: (results) => {
         this.bulkClearingTables.set(false);
-
+
         const successful = results.filter(result => !result.error);
         const failed = results.filter(result => result.error);
-
-        this.tableClearProgress.set({
-          completed: successful.length,
-          total: linesToClear.length,
-          failed: failed.length
+
+        this.tableClearProgress.set({
+          completed: successful.length,
+          total: linesToClear.length,
+          failed: failed.length
         });

         if (successful.length > 0) {
           this.snackBar.open(
-            `Successfully cleared table names for ${successful.length} line(s)${failed.length > 0 ? `, ${failed.length} failed` : ''}`,
-            'Close',
+            `Successfully cleared table names for ${successful.length} line(s)${failed.length > 0 ? `, ${failed.length} failed` : ''}`,
+            'Close',
             {
               duration: 5000,
               horizontalPosition: 'right',
@@ -929,7 +929,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
             verticalPosition: 'top'
           });
         }
-
+
         this.updateLinesData();
       },
       error: (error) => {
@@ -947,7 +947,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
   // Bulk clear column names for all lines
   bulkClearColumnNames(): void {
     const linesToClear = this.linesWithColumn();
-
+
     if (linesToClear.length === 0) {
       this.snackBar.open('No lines with column assignments found to clear', 'Close', {
         duration: 3000,
@@ -965,7 +965,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
   }

   private clearColumnNamesIndividually(linesToClear: Line[]): void {
-    const clearRequests = linesToClear.map(line =>
+    const clearRequests = linesToClear.map(line =>
       this.apiService.clearLineColumn(line.id).pipe(
         catchError(error => {
           console.error(`Error clearing column for line ${line.id}:`, error);
@@ -977,20 +977,20 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
     forkJoin(clearRequests).subscribe({
       next: (results) => {
         this.bulkClearingColumns.set(false);
-
+
         const successful = results.filter(result => !result.error);
         const failed = results.filter(result => result.error);
-
-        this.columnClearProgress.set({
-          completed: successful.length,
-          total: linesToClear.length,
-          failed: failed.length
+
+        this.columnClearProgress.set({
+          completed: successful.length,
+          total: linesToClear.length,
+          failed: failed.length
         });

         if (successful.length > 0) {
           this.snackBar.open(
-            `Successfully cleared column names for ${successful.length} line(s)${failed.length > 0 ? `, ${failed.length} failed` : ''}`,
-            'Close',
+            `Successfully cleared column names for ${successful.length} line(s)${failed.length > 0 ? `, ${failed.length} failed` : ''}`,
+            'Close',
             {
               duration: 5000,
               horizontalPosition: 'right',
@@ -1004,7 +1004,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
             verticalPosition: 'top'
           });
         }
-
+
         this.updateLinesData();
       },
       error: (error) => {
@@ -1023,12 +1023,12 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
   bulkUpdateTableForSubCategory(groupName: string): void {
     const categoryId = this.categoryId;
     const formValue = this.getSubCategoryBulkUpdateForm(groupName).value;
-
+
     // Get table_id from the selected object
-    const tableId = typeof formValue.table_name === 'object'
-      ? formValue.table_name?.id
+    const tableId = typeof formValue.table_name === 'object'
+      ? formValue.table_name?.id
       : this.tables().find(t => t.name === formValue.table_name)?.id;
-
+
     if (!categoryId || !tableId) {
       this.snackBar.open('Please select a table first', 'Close', {
         duration: 3000,
@@ -1057,7 +1057,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {

   private updateSubCategoryLinesIndividually(groupName: string, linesToUpdate: Line[], tableId: number): void {
     // Create an array of update requests - only update table_id
-    const updateRequests = linesToUpdate.map(line =>
+    const updateRequests = linesToUpdate.map(line =>
       this.apiService.updateLineTable(line.id, tableId).pipe(
         catchError(error => {
           console.error(`Error updating line ${line.id}:`, error);
@@ -1070,21 +1070,21 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
     forkJoin(updateRequests).subscribe({
       next: (results) => {
         this.subCategoryBulkUpdating.set(groupName, false);
-
+
         const successful = results.filter(result => !result.error);
         const failed = results.filter(result => result.error);
-
-        this.subCategoryBulkUpdateProgress.set(groupName, {
-          completed: successful.length,
-          total: linesToUpdate.length,
-          failed: failed.length
+
+        this.subCategoryBulkUpdateProgress.set(groupName, {
+          completed: successful.length,
+          total: linesToUpdate.length,
+          failed: failed.length
         });

         // Show success message
         if (successful.length > 0) {
           this.snackBar.open(
-            `Successfully updated ${successful.length} line(s) in ${groupName}${failed.length > 0 ? `, ${failed.length} failed` : ''}`,
-            'Close',
+            `Successfully updated ${successful.length} line(s) in ${groupName}${failed.length > 0 ? `, ${failed.length} failed` : ''}`,
+            'Close',
             {
               duration: 5000,
               horizontalPosition: 'right',
@@ -1098,7 +1098,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
             verticalPosition: 'top'
           });
         }
-
+
         // Clear the form and update the lines data
         this.getSubCategoryBulkUpdateForm(groupName).patchValue({ table_name: '' });
         this.subCategorySelectedTableIds.set(groupName, null);
@@ -1118,7 +1118,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {

   bulkUpdateColumnsForSubCategory(groupName: string): void {
     const linesToUpdate = this.getSubCategoryLinesWithoutColumn(groupName);
-
+
     if (linesToUpdate.length === 0) {
       this.snackBar.open(`No lines found in ${groupName} that need column updates`, 'Close', {
         duration: 3000,
@@ -1138,7 +1138,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {

   private updateSubCategoryColumnsForTables(groupName: string, linesByTable: Map<number, Line[]>): void {
     const tableIds = Array.from(linesByTable.keys());
-    const columnRequests = tableIds.map(tableId =>
+    const columnRequests = tableIds.map(tableId =>
       this.apiService.getColumnsByTable(tableId).pipe(
         map(columns => ({ tableId, columns, error: false })),
         catchError(error => {
@@ -1166,15 +1166,15 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
             const totalFailed = updateResults.reduce((sum, result) => sum + result.failed, 0);

             this.subCategoryBulkUpdatingColumns.set(groupName, false);
-            this.subCategoryColumnBulkUpdateProgress.set(groupName, {
-              completed: totalUpdated,
-              total: linesByTable.size > 0 ? Array.from(linesByTable.values()).flat().length : 0,
-              failed: totalFailed
+            this.subCategoryColumnBulkUpdateProgress.set(groupName, {
+              completed: totalUpdated,
+              total: linesByTable.size > 0 ? Array.from(linesByTable.values()).flat().length : 0,
+              failed: totalFailed
             });

             this.snackBar.open(
-              `Successfully updated ${totalUpdated} column(s) in ${groupName}${totalFailed > 0 ? `, ${totalFailed} failed` : ''}`,
-              'Close',
+              `Successfully updated ${totalUpdated} column(s) in ${groupName}${totalFailed > 0 ? `, ${totalFailed} failed` : ''}`,
+              'Close',
               {
                 duration: 5000,
                 horizontalPosition: 'right',
@@ -1211,7 +1211,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
   // Sub-category bulk clear table names
   bulkClearTableNamesForSubCategory(groupName: string): void {
     const linesToClear = this.getSubCategoryLinesWithTable(groupName);
-
+
     if (linesToClear.length === 0) {
       this.snackBar.open(`No lines with table assignments found to clear in ${groupName}`, 'Close', {
         duration: 3000,
@@ -1229,7 +1229,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
   }

   private clearSubCategoryTableNamesIndividually(groupName: string, linesToClear: Line[]): void {
-    const clearRequests = linesToClear.map(line =>
+    const clearRequests = linesToClear.map(line =>
       this.apiService.clearLineTable(line.id).pipe(
         catchError(error => {
           console.error(`Error clearing table for line ${line.id}:`, error);
@@ -1241,20 +1241,20 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
     forkJoin(clearRequests).subscribe({
       next: (results) => {
         this.subCategoryBulkClearingTables.set(groupName, false);
-
+
         const successful = results.filter(result => !result.error);
         const failed = results.filter(result => result.error);
-
-        this.subCategoryTableClearProgress.set(groupName, {
-          completed: successful.length,
-          total: linesToClear.length,
-          failed: failed.length
+
+        this.subCategoryTableClearProgress.set(groupName, {
+          completed: successful.length,
+          total: linesToClear.length,
+          failed: failed.length
         });

         if (successful.length > 0) {
           this.snackBar.open(
-            `Successfully cleared table names for ${successful.length} line(s) in ${groupName}${failed.length > 0 ? `, ${failed.length} failed` : ''}`,
-            'Close',
+            `Successfully cleared table names for ${successful.length} line(s) in ${groupName}${failed.length > 0 ? `, ${failed.length} failed` : ''}`,
+            'Close',
             {
               duration: 5000,
               horizontalPosition: 'right',
@@ -1268,7 +1268,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
             verticalPosition: 'top'
           });
         }
-
+
         this.updateLinesData();
       },
       error: (error) => {
@@ -1286,7 +1286,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
   // Sub-category bulk clear column names
   bulkClearColumnNamesForSubCategory(groupName: string): void {
     const linesToClear = this.getSubCategoryLinesWithColumn(groupName);
-
+
     if (linesToClear.length === 0) {
       this.snackBar.open(`No lines with column assignments found to clear in ${groupName}`, 'Close', {
         duration: 3000,
@@ -1304,7 +1304,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
   }

   private clearSubCategoryColumnNamesIndividually(groupName: string, linesToClear: Line[]): void {
-    const clearRequests = linesToClear.map(line =>
+    const clearRequests = linesToClear.map(line =>
       this.apiService.clearLineColumn(line.id).pipe(
         catchError(error => {
           console.error(`Error clearing column for line ${line.id}:`, error);
@@ -1316,20 +1316,20 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
     forkJoin(clearRequests).subscribe({
       next: (results) => {
         this.subCategoryBulkClearingColumns.set(groupName, false);
-
+
         const successful = results.filter(result => !result.error);
         const failed = results.filter(result => result.error);
-
-        this.subCategoryColumnClearProgress.set(groupName, {
-          completed: successful.length,
-          total: linesToClear.length,
-          failed: failed.length
+
+        this.subCategoryColumnClearProgress.set(groupName, {
+          completed: successful.length,
+          total: linesToClear.length,
+          failed: failed.length
         });

         if (successful.length > 0) {
           this.snackBar.open(
-            `Successfully cleared column names for ${successful.length} line(s) in ${groupName}${failed.length > 0 ? `, ${failed.length} failed` : ''}`,
-            'Close',
+            `Successfully cleared column names for ${successful.length} line(s) in ${groupName}${failed.length > 0 ? `, ${failed.length} failed` : ''}`,
+            'Close',
             {
               duration: 5000,
               horizontalPosition: 'right',
@@ -1343,7 +1343,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
             verticalPosition: 'top'
           });
         }
-
+
         this.updateLinesData();
       },
       error: (error) => {
@@ -1360,13 +1360,13 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {

   onSuggestTables(): void {
     const currentLines = this.lines();
-
+
     this.tableSuggestionService.suggestTables('main-category', currentLines).subscribe({
       next: (matches) => {
         console.log('Main category suggestions received:', matches);
         console.log('showSuggestedTables signal value:', this.showSuggestedTables());
         console.log('suggestedTables signal value:', this.suggestedTables());
-
+
         if (matches.length === 0) {
           this.snackBar.open('No matching tables found', 'Close', {
             duration: 3000,
@@ -1398,11 +1398,11 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
       // Set the table in the form
       this.bulkUpdateForm.patchValue({ table_name: table });
       this.selectedTableId.set(table.id);
-
+
       // Reset typing flag after selection
       this.userTypingTable = false;
       this.tableDropdownOpen = false;
-
+
       this.snackBar.open(`Selected table: ${tableMatch.table_name}`, 'Close', {
         duration: 2000,
         horizontalPosition: 'right',
@@ -1424,7 +1424,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
   clearAllTableSuggestions(): void {
     // Clear main category suggestions
     this.tableSuggestionService.closeSuggestions('main-category');
-
+
     // Clear all sub-category suggestions
     const groupKeys = this.getGroupKeys();
     groupKeys.forEach(groupName => {
@@ -1435,7 +1435,7 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
   // Sub-category table suggestion methods
   onSuggestTablesForSubCategory(groupName: string): void {
     const groupLines = this.getSubCategoryLines(groupName);
-
+
     this.tableSuggestionService.suggestTables(`subcategory-${groupName}`, groupLines).subscribe({
       next: (matches) => {
         if (matches.length === 0) {
@@ -1470,11 +1470,11 @@ export class LinesComponent implements OnInit, OnDestroy, OnChanges {
       const form = this.getSubCategoryBulkUpdateForm(groupName);
       form.patchValue({ table_name: table });
       this.subCategorySelectedTableIds.set(groupName, table.id);
-
+
       // Reset typing flag after selection
       this.subCategoryUserTypingTable.set(groupName, false);
       this.subCategoryTableDropdownOpen.set(groupName, false);
-
+
       this.snackBar.open(`Selected table: ${tableMatch.table_name} for ${groupName}`, 'Close', {
         duration: 2000,
         horizontalPosition: 'right',
